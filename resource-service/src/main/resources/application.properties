spring.application.name=resource-service
server.port=8081
song.service.url=${SONG_SERVICE_URL:http://localhost:8080/songs}
storage.service.url=${STORAGE_SERVICE_URL:http://localhost:8089/storages}
aws.url=${AWS_URL:https://localhost.localstack.cloud:4566}
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5433/resourcedb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.jpa.hibernate.ddl-auto=none
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
eureka.client.service-url.defaultZone= ${EUREKA_URI:http://localhost:8761/eureka}
eureka.instance.prefer-ip-address= true
aws.s3.access-key=test
aws.s3.secret-key=test
aws.bucket-name=bucket

spring.kafka.bootstrap-servers=${KAFKA_URL:localhost:39092}
kafka.topic.resource=${KAFKA_TOPIC_RESOURCE:resource}
kafka.topic.resource-processed=${KAFKA_TOPIC_RESOURCE_PROCESSED:resource-processed}
spring.kafka.consumer.group-id=resource-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.prometheus.enabled=true