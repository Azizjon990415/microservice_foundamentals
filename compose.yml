services:
  song-db:
    image: postgres:16-alpine
    container_name: song-db
    environment:
      POSTGRES_DB: ${SONGDB_NAME}
      POSTGRES_USER: ${SONGDB_USER}
      POSTGRES_PASSWORD: ${SONGDB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SONGDB_USER} -d ${SONGDB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-db:
    image: postgres:16-alpine
    container_name: resource-db
    environment:
      POSTGRES_DB: ${RESOURCEDB_NAME}
      POSTGRES_USER: ${RESOURCEDB_USER}
      POSTGRES_PASSWORD: ${RESOURCEDB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${RESOURCEDB_USER} -d ${RESOURCEDB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  storage-db:
    image: postgres:16-alpine
    container_name: storage-db
    environment:
      POSTGRES_DB: ${STORAGEDB_NAME}
      POSTGRES_USER: ${STORAGEDB_USER}
      POSTGRES_PASSWORD: ${STORAGEDB_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - ./init-scripts/storage-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${STORAGEDB_USER} -d ${STORAGEDB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  song-service:
    build: ./song-service
    deploy:
      replicas: 2
    ports:
      - "8079-8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${SONGDB_USER}
      SPRING_DATASOURCE_PASSWORD: ${SONGDB_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      EUREKA_URI: ${EUREKA_URI}
    depends_on:
      song-db:
        condition: service_healthy
      eureka:
        condition: service_healthy

  resource-service:
    build: ./resource-service
    container_name: resource-service
    ports:
      - "8081:8081"
    environment:
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      STORAGE_SERVICE_URL: ${STORAGE_SERVICE_URL}
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${RESOURCEDB_USER}
      SPRING_DATASOURCE_PASSWORD: ${RESOURCEDB_PASSWORD}
      AWS_URL: ${AWS_URL}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      EUREKA_URI: ${EUREKA_URI}
      KAFKA_URL: ${KAFKA_URL}
      KAFKA_TOPIC_RESOURCE: ${KAFKA_TOPIC_RESOURCE}
      KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_ID}
      KAFKA_TOPIC_RESOURCE_PROCESSED: ${KAFKA_TOPIC_RESOURCE_PROCESSED}
      LOGSTASH_DESTINATION: ${LOGSTASH_DESTINATION}
    depends_on:
      resource-db:
        condition: service_healthy
      eureka:
        condition: service_healthy
  storage-service:
    build: ./storage-service
    container_name: storage-service
    ports:
      - "8089:8089"
    environment:
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      SPRING_DATASOURCE_URL: ${STORAGE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${STORAGEDB_USER}
      SPRING_DATASOURCE_PASSWORD: ${STORAGEDB_PASSWORD}
      AWS_URL: ${AWS_URL}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      EUREKA_URI: ${EUREKA_URI}
      KAFKA_URL: ${KAFKA_URL}
      KAFKA_TOPIC_RESOURCE: ${KAFKA_TOPIC_RESOURCE}
      KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_ID}
      KAFKA_TOPIC_RESOURCE_PROCESSED: ${KAFKA_TOPIC_RESOURCE_PROCESSED}
      LOGSTASH_DESTINATION: ${LOGSTASH_DESTINATION}
    depends_on:
      storage-db:
        condition: service_healthy
      eureka:
        condition: service_healthy
  resource-processor:
    build: ./resource-processor
    container_name: resource-processor
    ports:
      - "8083:8083"
    environment:
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      RESOURCE_SERVICE_URL: ${RESOURCE_SERVICE_URL}
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      EUREKA_URI: ${EUREKA_URI}
      KAFKA_URL: ${KAFKA_URL}
      KAFKA_TOPIC_RESOURCE: ${KAFKA_TOPIC_RESOURCE}
      KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_ID}
      KAFKA_TOPIC_RESOURCE_PROCESSED: ${KAFKA_TOPIC_RESOURCE_PROCESSED}
      LOGSTASH_DESTINATION: ${LOGSTASH_DESTINATION}
    depends_on:
      eureka:
        condition: service_healthy
  api-gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "80:80"
    environment:
      EUREKA_URI: ${EUREKA_URI}
      LOGSTASH_DESTINATION: ${LOGSTASH_DESTINATION}
    depends_on:
      - eureka
  eureka:
    build: ./eureka
    container_name: eureka
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8761 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  localstack:
    container_name: localstack
    image: localstack/localstack
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
    volumes:
      - "./localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack/init:/etc/localstack/init/ready.d"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    image: confluentinc/cp-server:7.1.2
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
      - "1092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka2:
    image: confluentinc/cp-server:7.1.2
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "2092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka3:
    image: confluentinc/cp-server:7.1.2
    depends_on:
      - zookeeper
    ports:
      - "39092:39092"
      - "3092:9092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8090:8080"
    restart: always
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka:9092,PLAINTEXT://kafka2:9092,PLAINTEXT://kafka3:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 3
        window: 15s
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    container_name: logstash
    ports:
      - "5044:5044" # For Beats input
      - "9600:9600" # For monitoring
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d
      - ./init-scripts/logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - xpack.monitoring.elasticsearch.hosts=["http://elasticsearch:9200"]
    depends_on:
      elasticsearch:
        condition: service_healthy
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
